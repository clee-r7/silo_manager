#!/usr/bin/env ruby
# TODO: Fix multi-byte problem (copied and pasted from PDF)

require 'rubygems'
require File.expand_path(File.join(File.dirname(__FILE__), '../lib/nexpose'))
require File.expand_path(File.join(File.dirname(__FILE__), '../lib/options'))

################################
# Multi-Tenant User Attributes #
################################
MTU_ATTRS = ['authsrcid:integer:required', 'user-name:string:required',
'full-name:string:required', 'email:string:optional', 'password:string:optional', 'enabled:boolean:required',
'superuser:boolean:required']

SILO_ACCESS_ATTRS = ['all-groups:boolean:required', 'all-sites:boolean:required', 'default-silo:boolean:required',
'role-name:string:required', 'silo-id:string:required']

###########################
# Silo Profile Attributes #
###########################
SILO_PROFILE_ATTRS = ['id:string:required', 'name:string:required', 'description:string:optional',
'all-licensed-modules:boolean:required', 'all-global-engines:boolean:required', 'all-global-report-templates:boolean:required',
'all-global-scan-templates:boolean:required']

ACCEPTED_REPORT_INPUTS = ['csv', 'db', 'html', 'ns-xml', 'pdf', 'qualys-xml', 'raw-xml', 'rtf', 'scap-xml', 'text']

###################
# Silo Attributes #
###################
SILO_CONFIG_ATTRS = ['id:string:required', 'name:string:required', 'silo-profile-id:string:required',
'description:string:optional', 'max-assets:integer:required', 'max-hosted-assets:integer:required',
'max-users:integer:required']

MERCHANT_ATTRS = ['acquirer-relationship:boolean:required', 'agent-relationship:boolean:required',
'payment-application:string:required', 'payment-version:string:required', 'ecommerce:boolean:required',
'grocery:boolean:required', 'mail-order:boolean:required', 'petroleum:boolean:required', 'retail:boolean:required',
'telecommunication:boolean:required', 'travel:boolean:required', 'url:string:required', 'company:string:required',
'email-address:string:optional', 'first-name:string:required', 'last-name:string:required', 'phone-number:string:required',
'title:string:optional']

ADDRESS_ATTRS = ['city:string:required', 'country:string:required', 'line1:string:required', 'line2:string:required',
'state:string:required', 'zip:string:required']

QSA_ATTRS = ['url:string:required', 'company:string:required', 'email-address:string:optional', 'first-name:string:required',
'last-name:string:required', 'phone-number:string:required', 'title:string:optional']

ORG_ATTRS = ['url:string:required', 'company:string:required', 'email-address:string:optional', 'first-name:string:required',
'last-name:string:required', 'phone-number:string:required', 'title:string:optional']

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def get_integer_input name, return_main=false
	integer_inputed = false
	while !integer_inputed
		puts "Enter an integer value for #{name}:"
		begin
			input = gets.chomp
			if return_main and input =~ /:main/i
				return nil
			end

			begin
				input = Integer input
				integer_inputed = true
			rescue Exception => e
				puts "Invalid input"
			end
		end
	end
	input
end

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def get_string_input name, return_main=false
	puts "Enter an string value for #{name}:"
	input = gets.chomp
	if return_main and input =~ /:main/i
		return nil
	end
	input
end

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def get_boolean_input name='', return_main=false
	boolean_inputed = false
	while !boolean_inputed
		puts "Enter a boolean value (true/1 or false/0) for #{name}:"
		begin
			input = gets.chomp
			if return_main and input =~ /:main/i
				return nil
			end

			if input =~ /true|1/i
				input = true
				boolean_inputed = true
			elsif input =~ /false|0/i
				input = false
				boolean_inputed = true
			else
				puts "Invalid input!"
			end
		end
	end
	input
end

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def process_attrs attrs, title
	puts title
	puts "To return to the main menu type ':main'"

	input_hash = {}

	attrs.each do |attr|
		parts = attr.split ":"
		name = parts[0] + " (#{parts[2]})"
		case parts[1]
			when /boolean/
				input = get_boolean_input name, true
			when /integer/
				input = get_integer_input name, true
			when /string/
				input = get_string_input name, true
		end

		if input.nil?
			return nil
		else
			input_hash[parts[0]] = input
		end
	end

	input_hash
end


#-------------------------------------------------------------------------
# Gets an comma separated list of input from the user and parses
# it into an array
#
# integer - if true, the input values must be an integers
# restricted_values - Input should be of a certain type
#-------------------------------------------------------------------------
def get_value_array integer=false, restricted_values=[]
	output = []
	success = false
	while !success
		puts "Enter a comma separated list of values or nothing to skip:"
		if not restricted_values.empty?
			puts "Input is restricted to: #{restricted_values.inspect}"
		end

		input = gets.chomp

		if input =~ /:main/
			return nil
		end

		if input.empty?
			return []
		end

		begin
			input.split(",").each do |part|

				# Do validation first
				if not restricted_values.empty?
				   if not restricted_values.include? part
					   "This is not an allowed input: #{part.to_s}"
					   raise
				   end
				end

			   output << (integer ? part.to_i : part.to_s)
			end
			success = true
		rescue Exception
			puts "Invalid input!"
			if integer
				puts "Integer input only"
			end
		end
	end

	output
end

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def enter_data? type
	while true
		puts "Do you wish to enter #{type} data (yes/no)?"
		input = gets.chomp
		if input =~ /yes/i
			return true
		elsif input =~ /no/i
			return false
		else
			puts "Invalid input!"
		end
	end
end

#-------------------------------------------------------------------------
# Main method that builds the input map for creating a multi-tenant user
#-------------------------------------------------------------------------
def create_multi_tenant_user
	user_config = process_attrs MTU_ATTRS, "User Configuration"
	if not user_config
		return
	end

	silo_configs = process_attrs SILO_ACCESS_ATTRS, "Silo Configuration"
	if not silo_configs
		return
	end

	if not silo_configs['all-sites']
		puts "Site ID values:"
		ids = get_value_array true
		if not ids
			return
		end
		if ids and not ids.empty?
			silo_configs['allowed-sites'] = ids
		end
	end

	if not silo_configs['all-groups']
		puts "Group ID values:"
		ids = get_value_array true
		if not ids
			return
		end
		if ids and not ids.empty?
			silo_configs['allowed-groups'] = ids
		end
	end

	begin
		@client_api.login
		@client_api.create_multi_tenant_user user_config, silo_configs
		puts "Successfully created multi-tenant user!"
	rescue Exception => e
		puts e.message
	end
end

#-------------------------------------------------------------------------
# Main method that builds the input map for creating a silo profile
#-------------------------------------------------------------------------
def create_silo_profile
	silo_profile_config = process_attrs SILO_PROFILE_ATTRS, "Silo Profile Configuration"
	if not silo_profile_config
		return
	end

	permissions = {}

	unless silo_profile_config['all-global-report-templates']
		puts "Global report template names:"
		names = get_value_array
		if not names
			return
		end
		if names and not names.empty?
			permissions['global_report_templates'] = names
		end
	end

	unless silo_profile_config['all-global-engines']
		puts "Global scan engine names:"
		names = get_value_array
		if not names
			return
		end
		if names and not names.empty?
			permissions['global_scan_engines'] = names
		end
	end

	unless silo_profile_config['all-global-scan-templates']
		puts "Global scan template names:"
		names = get_value_array
		if not names
			return
		end
		if names and not names.empty?
			permissions['global_scan_templates'] = names
		end
	end

	unless silo_profile_config['all-licensed-modules']
		puts "Licensed module names:"
		names = get_value_array
		if not names
			return
		end
		if names and not names.empty?
			permissions['licensed_modules'] = names
		end
	end

	puts "Restricted Report Format names:"
	names = get_value_array false, ACCEPTED_REPORT_INPUTS
	unless names
		return
	end
	if names and not names.empty?
		permissions['restricted_report_formats'] = names
	end

	puts "Restricted Report Section names:"
	names = get_value_array
	unless names
		return
	end
	if names and not names.empty?
		permissions['restricted_report_sections'] = names
	end

	begin
		@client_api.login
		@client_api.create_silo_profile silo_profile_config, permissions
		puts "Successfully created silo profile!"
	rescue Exception => e
		puts e.message
	end
end

#-------------------------------------------------------------------------
# Main method that builds the input map for creating a silo
#-------------------------------------------------------------------------
def create_silo
   	silo_config = process_attrs SILO_CONFIG_ATTRS, "Silo Configuration"
	if not silo_config
		return
	end

	if (enter_data? "Organization")
		organization_data = process_attrs ORG_ATTRS, "Organization Data"
		address_data = process_attrs ADDRESS_ATTRS,  "Address Data"
		silo_config['organization'] = organization_data
		silo_config['organization']['address'] = address_data
	end

	if (enter_data? "Merchant")
		merchant_data = process_attrs MERCHANT_ATTRS , "Merchant Data"
		merchant_address = process_attrs ADDRESS_ATTRS, "Merchant Address Data"

		puts "DBA values"
		dba = get_value_array

		puts "Industry values"
		industries = get_value_array

		qsa = process_attrs QSA_ATTRS, "QSA Data"
		qsa_address = process_attrs ADDRESS_ATTRS, "QSA Address Data"


		silo_config['merchant'] = merchant_data
		silo_config['merchant']['address'] = merchant_address
		silo_config['merchant']['other_industries'] = industries
		silo_config['merchant']['dba'] = dba
		silo_config['merchant']['qsa'] = qsa
		silo_config['merchant']['qsa']['address'] = qsa_address
	end

	begin
		@client_api.login
		@client_api.create_silo silo_config
		puts "Successfully created silo!"
	rescue Exception => e
		puts e.message
	end
end

#-------------------------------------------------------------------------
# Main input screen
#-------------------------------------------------------------------------
def get_main_select
	id_choosen = false
	while !id_choosen
		puts "\nChoose one of the following IDs:"
		puts "1. Create a new multi-tenant user"
		puts "2. Create a new silo-profile"
		puts "3. Create a new silo"

		id = gets.chomp
		if id =~ /quit/i
			exit 0
		end

		begin
			id = id.to_i
			id_choosen = true
		rescue Exception => e
			e.
			puts "Input error"
		end
	end
	id
end

###############
# ENTRY POINT #
###############
begin
	options = Options.parse ARGV
	begin
		@client_api = Nexpose::Connection.new options.host, options.user, options.password, options.port
		@client_api.login
	rescue Exception => e
		puts "Unable to connect to #{options.host}"
		puts e.message
		exit 1
	end

	while true
		puts "To quit at anytime type 'quit'"
		case get_main_select
			when 1
				create_multi_tenant_user
			when 2
				create_silo_profile
			when 3
				create_silo
			else
				puts "Invalid input"
		end
	end
end